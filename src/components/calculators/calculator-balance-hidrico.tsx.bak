"use client";

import React, { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Form, FormField, FormItem, FormLabel, FormControl, FormMessage, FormDescription } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Separator } from '@/components/ui/separator';
import { Checkbox } from "@/components/ui/checkbox";
import { Droplet, TrendingUp, TrendingDown, Sigma, RefreshCcw, Clock, Wind, Thermometer, Atom, Brain, Weight, Info } from 'lucide-react';
import { cn } from '@/lib/utils';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion"


const balanceHidricoSchema = z.object({
  horasBalance: z.coerce.number().min(1, "Debe ser >= 1 hora").optional().default(24),
  pesoPaciente: z.coerce.number().min(0, "Debe ser >= 0 kg").optional().default(0),
  // Ingresos
  ingresosOral: z.coerce.number().min(0, "Debe ser >= 0").optional().default(0),
  ingresosIV: z.coerce.number().min(0, "Debe ser >= 0").optional().default(0),
  ingresosEnteral: z.coerce.number().min(0, "Debe ser >= 0").optional().default(0),
  // aguaMetabolicaEstimada is now calculated
  ingresosOtros: z.coerce.number().min(0, "Debe ser >= 0").optional().default(0),
  // Egresos
  egresosOrina: z.coerce.number().min(0, "Debe ser >= 0").optional().default(0),
  egresosDeposiciones: z.coerce.number().min(0, "Debe ser >= 0").optional().default(0),
  egresosVomitos: z.coerce.number().min(0, "Debe ser >= 0").optional().default(0),
  egresosDrenajes: z.coerce.number().min(0, "Debe ser >= 0").optional().default(0),
  otrasPerdidasInsensibles: z.coerce.number().min(0, "Debe ser >= 0").optional().default(0),

  // Condiciones para pérdidas adicionales
  pacienteIntubado: z.boolean().optional().default(false),
  horasIntubacionVM: z.coerce.number().min(0).optional().default(0),
  horasTuboT: z.coerce.number().min(0).optional().default(0),

  presentaTaquipnea: z.boolean().optional().default(false),
  frecuenciaRespiratoriaPromedio: z.coerce.number().min(0).optional().default(0),
  horasTaquipnea: z.coerce.number().min(0).optional().default(0),

  presentoFiebre: z.boolean().optional().default(false),
  horasFiebre38a39: z.coerce.number().min(0).optional().default(0),
  horasFiebre39a40: z.coerce.number().min(0).optional().default(0),
  horasFiebre40a41: z.coerce.number().min(0).optional().default(0),

  presentoSudoracion: z.boolean().optional().default(false),
  horasSudorModerado: z.coerce.number().min(0).optional().default(0),
  horasSudorIntenso: z.coerce.number().min(0).optional().default(0),
}).refine(data => !data.pacienteIntubado || (data.horasIntubacionVM || 0) <= (data.horasBalance || 24), {
  message: "Horas de VM no pueden exceder las horas del balance.",
  path: ["horasIntubacionVM"],
}).refine(data => !data.pacienteIntubado || (data.horasTuboT || 0) <= (data.horasIntubacionVM || 0), {
  message: "Horas con Tubo en T no pueden exceder las horas con VM.",
  path: ["horasTuboT"],
}).refine(data => !data.presentaTaquipnea || (data.horasTaquipnea || 0) <= (data.horasBalance || 24), {
  message: "Horas de Taquipnea no pueden exceder las horas del balance.",
  path: ["horasTaquipnea"],
}).refine(data => !data.presentoFiebre || ((data.horasFiebre38a39 || 0) + (data.horasFiebre39a40 || 0) + (data.horasFiebre40a41 || 0)) <= (data.horasBalance || 24), {
  message: "Suma de horas con fiebre no puede exceder las horas del balance.",
  path: ["horasFiebre38a39"],
}).refine(data => !data.presentoSudoracion || ((data.horasSudorModerado || 0) + (data.horasSudorIntenso || 0)) <= (data.horasBalance || 24), {
  message: "Suma de horas con sudoración no puede exceder las horas del balance.",
  path: ["horasSudorModerado"],
});


type BalanceHidricoFormValues = z.infer<typeof balanceHidricoSchema>;

const BalanceHidricoCalculator: React.FC = () => {
  const [totalIngresos, setTotalIngresos] = useState<number | null>(null);
  const [totalEgresos, setTotalEgresos] = useState<number | null>(null);
  const [balanceResult, setBalanceResult] = useState<number | null>(null);
  const [perdidasAdicionalesCalculadas, setPerdidasAdicionalesCalculadas] = useState<number | null>(null);
  const [totalEgresosInsensibles, setTotalEgresosInsensibles] = useState<number | null>(null);
  const [aguaMetabolicaCalculada, setAguaMetabolicaCalculada] = useState<number | null>(null);


  const form = useForm<BalanceHidricoFormValues>({
    resolver: zodResolver(balanceHidricoSchema),
    defaultValues: {
      horasBalance: 24,
      pesoPaciente: 0,
      ingresosOral: 0,
      ingresosIV: 0,
      ingresosEnteral: 0,
      ingresosOtros: 0,
      egresosOrina: 0,
      egresosDeposiciones: 0,
      egresosVomitos: 0,
      egresosDrenajes: 0,
      otrasPerdidasInsensibles: 0,
      pacienteIntubado: false,
      horasIntubacionVM: 0,
      horasTuboT: 0,
      presentaTaquipnea: false,
      frecuenciaRespiratoriaPromedio: 0,
      horasTaquipnea: 0,
      presentoFiebre: false,
      horasFiebre38a39: 0,
      horasFiebre39a40: 0,
      horasFiebre40a41: 0,
      presentoSudoracion: false,
      horasSudorModerado: 0,
      horasSudorIntenso: 0,
    },
  });

  const { watch } = form;
  const watchPacienteIntubado = watch("pacienteIntubado");
  const watchPresentaTaquipnea = watch("presentaTaquipnea");
  const watchPresentoFiebre = watch("presentoFiebre");
  const watchPresentoSudoracion = watch("presentoSudoracion");
  const watchHorasBalance = watch("horasBalance", 24);


  const onBalanceSubmit = (data: BalanceHidricoFormValues) => {
    const horasBalanceCalc = data.horasBalance || 24;
    const aguaMetabolica = (300 / 24) * horasBalanceCalc;
    setAguaMetabolicaCalculada(aguaMetabolica);

    const ingresos = (data.ingresosOral || 0) + 
                     (data.ingresosIV || 0) + 
                     (data.ingresosEnteral || 0) + 
                     aguaMetabolica + 
                     (data.ingresosOtros || 0);

    // Pérdidas por condiciones específicas
    let pIntubacion = 0;
    if (data.pacienteIntubado && (data.horasIntubacionVM || 0) > 0) {
      const horasVMNetas = Math.max(0, (data.horasIntubacionVM || 0) - (data.horasTuboT || 0));
      pIntubacion = (horasVMNetas * 20) + ((data.horasTuboT || 0) * 40);
    }

    let pTaquipnea = 0;
    if (data.presentaTaquipnea && (data.frecuenciaRespiratoriaPromedio || 0) > 20 && (data.horasTaquipnea || 0) > 0) {
      pTaquipnea = Math.floor(((data.frecuenciaRespiratoriaPromedio || 0) - 20) / 5) * 4 * (data.horasTaquipnea || 0);
    }
    
    let pFiebre = 0;
    if (data.presentoFiebre) {
      pFiebre = ((data.horasFiebre38a39 || 0) * 20) + 
                ((data.horasFiebre39a40 || 0) * 40) + 
                ((data.horasFiebre40a41 || 0) * 60);
    }

    let pSudor = 0;
    if (data.presentoSudoracion) {
      pSudor = ((data.horasSudorModerado || 0) * 20) + 
               ((data.horasSudorIntenso || 0) * 40);
    }
    const perdidasPorCondicionesEspecificas = pIntubacion + pTaquipnea + pFiebre + pSudor;
    setPerdidasAdicionalesCalculadas(perdidasPorCondicionesEspecificas);

    // Cálculo de pérdidas basales
    let perdidasBasalesCalculadas = 0;
    if (data.pesoPaciente && data.pesoPaciente > 0) {
      perdidasBasalesCalculadas = 0.5 * data.pesoPaciente * horasBalanceCalc;
    } else {
      perdidasBasalesCalculadas = (800 / 24) * horasBalanceCalc;
    }
    
    const ajusteManualPerdidasInsensibles = data.otrasPerdidasInsensibles || 0;
    const calcTotalEgresosInsensibles = perdidasBasalesCalculadas + ajusteManualPerdidasInsensibles + perdidasPorCondicionesEspecificas;
    setTotalEgresosInsensibles(calcTotalEgresosInsensibles);

    const egresos = (data.egresosOrina || 0) + 
                    (data.egresosDeposiciones || 0) + 
                    (data.egresosVomitos || 0) + 
                    (data.egresosDrenajes || 0) + 
                    calcTotalEgresosInsensibles;
    
    setTotalIngresos(ingresos);
    setTotalEgresos(egresos);
    setBalanceResult(ingresos - egresos);
  };

  const resetCalculator = () => {
    form.reset();
    setTotalIngresos(null);
    setTotalEgresos(null);
    setBalanceResult(null);
    setPerdidasAdicionalesCalculadas(null);
    setTotalEgresosInsensibles(null);
    setAguaMetabolicaCalculada(null);
  };

  const renderInputField = (name: keyof BalanceHidricoFormValues, label: string, placeholder?: string, icon?: React.ReactNode, description?: string) => (
    <FormField
      control={form.control}
      name={name}
      render={({ field }) => (
        <FormItem>
          <FormLabel className="flex items-center">{icon && <span className="mr-2">{icon}</span>}{label}</FormLabel>
          <FormControl>
            <Input
              type="number"
              placeholder={placeholder || "0 ml"}
              {...field}
              value={String(field.value) || ''}
              onChange={e => {
                const val = e.target.value;
                if (val === '') {
                     field.onChange(0);
                } else {
                    const numVal = parseFloat(val);
                    field.onChange(isNaN(numVal) ? 0 : numVal);
                }
              }}
              onFocus={e => e.target.select()}
            />
          </FormControl>
          {description && <FormDescription className="text-xs">{description}</FormDescription>}
          <FormMessage />
        </FormItem>
      )}
    />
  );
  
  const renderCheckboxField = (name: keyof BalanceHidricoFormValues, label: string) => (
     <FormField
        control={form.control}
        name={name}
        render={({ field }) => (
          <FormItem className="flex flex-row items-start space-x-3 space-y-0 rounded-md border p-3 shadow-sm">
            <FormControl>
              <Checkbox
                checked={field.value as boolean}
                onCheckedChange={field.onChange}
              />
            </FormControl>
            <div className="space-y-1 leading-none">
              <FormLabel>{label}</FormLabel>
            </div>
          </FormItem>
        )}
      />
  );

  return (
    <Card className="w-full max-w-2xl mx-auto">
      <CardHeader>
        <CardTitle className="flex items-center"><Droplet className="mr-2 h-6 w-6 text-blue-500" />Balance Hídrico Detallado</CardTitle>
        <CardDescription>
          Calcula el balance hídrico considerando ingresos (agua metabólica automática), egresos, pérdidas basales y adicionales.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onBalanceSubmit)} className="space-y-8">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4">
                {renderInputField("horasBalance", `Horas del Balance (Actual: ${watchHorasBalance}h)`, "ej: 12 o 24", <Clock size={16}/>)}
                {renderInputField("pesoPaciente", "Peso del Paciente (kg) (Opcional)", "Ej: 70", <Weight size={16}/>, "Si se ingresa (>0kg), las pérdidas basales se calculan como 0.5ml/kg/h. Si no, se estiman ~33.3ml/h (800ml/24h).")}
            </div>
            <Separator />
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4">
              <div className="space-y-4 p-4 border rounded-lg bg-green-50 dark:bg-green-900/20">
                <h3 className="text-lg font-semibold text-green-700 dark:text-green-400 flex items-center">
                  <TrendingUp className="mr-2 h-5 w-5" /> Ingresos (ml)
                </h3>
                {renderInputField("ingresosOral", "Vía Oral")}
                {renderInputField("ingresosIV", "Infusiones IV")}
                {renderInputField("ingresosEnteral", "Nutrición Enteral / SNG")}
                <div className="p-2 border border-dashed border-green-300 rounded-md bg-green-100 dark:bg-green-800/20">
                    <p className="text-xs font-medium text-green-700 dark:text-green-300 flex items-center"><Atom size={14} className="mr-1"/>Agua Metabólica (Calculada)</p>
                    <FormDescription className="text-xs pt-1">
                        Se calcula automáticamente al enviar el formulario (aprox. 12.5ml/h).
                    </FormDescription>
                </div>
                {renderInputField("ingresosOtros", "Otros Ingresos (medicación, etc.)")}
              </div>

              <div className="space-y-4 p-4 border rounded-lg bg-red-50 dark:bg-red-900/20">
                <h3 className="text-lg font-semibold text-red-700 dark:text-red-400 flex items-center">
                  <TrendingDown className="mr-2 h-5 w-5" /> Egresos (ml)
                </h3>
                {renderInputField("egresosOrina", "Diuresis (Orina)")}
                {renderInputField("egresosDeposiciones", "Deposiciones (líquidas)")}
                {renderInputField("egresosVomitos", "Vómitos")}
                {renderInputField("egresosDrenajes", "Drenajes / Débitos SNG")}
                {renderInputField("otrasPerdidasInsensibles", "Ajuste Manual a Pérdidas Insensibles (ml)", "0 ml", undefined, "Sume aquí pérdidas no cubiertas por el cálculo basal automático o las condiciones detalladas (fiebre, VM, etc.).")}
              </div>
            </div>
            
            <Accordion type="single" collapsible className="w-full">
              <AccordionItem value="perdidas-adicionales">
                <AccordionTrigger className="text-lg font-semibold text-orange-600 hover:no-underline">
                  <Brain size={20} className="mr-2"/> Cálculo Detallado de Pérdidas Adicionales (Opcional)
                </AccordionTrigger>
                <AccordionContent className="pt-4 space-y-6">
                  <Card className="p-4 shadow-sm">
                    <CardHeader className="p-0 pb-2 mb-2 border-b">
                        <FormLabel className="text-md font-medium flex items-center"><Wind size={18} className="mr-2"/>Intubación</FormLabel>
                    </CardHeader>
                    <CardContent className="p-0 space-y-3">
                        {renderCheckboxField("pacienteIntubado", "¿Paciente Intubado?")}
                        {watchPacienteIntubado && (
                            <>
                                {renderInputField("horasIntubacionVM", `Horas con Ventilación Mecánica (de ${watchHorasBalance}h del balance)`)}
                                {renderInputField("horasTuboT", `De esas horas con VM, ¿cuántas con Tubo en T? (de ${form.getValues("horasIntubacionVM") || 0}h de VM)`)}
                                <FormDescription className="text-xs">VM: 20ml/h. Tubo en T: 40ml/h.</FormDescription>
                            </>
                        )}
                    </CardContent>
                  </Card>

                   <Card className="p-4 shadow-sm">
                    <CardHeader className="p-0 pb-2 mb-2 border-b">
                         <FormLabel className="text-md font-medium flex items-center"><Wind size={18} className="mr-2"/>Taquipnea</FormLabel>
                    </CardHeader>
                    <CardContent className="p-0 space-y-3">
                        {renderCheckboxField("presentaTaquipnea", "¿Presentó Taquipnea (FR > 20/min)?")}
                        {watchPresentaTaquipnea && (
                            <>
                                {renderInputField("frecuenciaRespiratoriaPromedio", "Frecuencia Respiratoria Promedio (ej: 25)")}
                                {renderInputField("horasTaquipnea", `Horas con Taquipnea (de ${watchHorasBalance}h del balance)`)}
                                <FormDescription className="text-xs">+4ml/h por cada 5 resp. sobre FR 20.</FormDescription>
                            </>
                        )}
                    </CardContent>
                   </Card>

                   <Card className="p-4 shadow-sm">
                    <CardHeader className="p-0 pb-2 mb-2 border-b">
                        <FormLabel className="text-md font-medium flex items-center"><Thermometer size={18} className="mr-2"/>Fiebre</FormLabel>
                    </CardHeader>
                    <CardContent className="p-0 space-y-3">
                        {renderCheckboxField("presentoFiebre", "¿Presentó Fiebre?")}
                        {watchPresentoFiebre && (
                            <>
                                {renderInputField("horasFiebre38a39", `Horas con T° 38-39°C (de ${watchHorasBalance}h del balance)`)}
                                {renderInputField("horasFiebre39a40", `Horas con T° 39-40°C (de ${watchHorasBalance}h del balance)`)}
                                {renderInputField("horasFiebre40a41", `Horas con T° 40-41°C (de ${watchHorasBalance}h del balance)`)}
                                <FormDescription className="text-xs">38-39°C: +20ml/h. 39-40°C: +40ml/h. 40-41°C: +60ml/h.</FormDescription>
                            </>
                        )}
                    </CardContent>
                   </Card>

                  <Card className="p-4 shadow-sm">
                    <CardHeader className="p-0 pb-2 mb-2 border-b">
                        <FormLabel className="text-md font-medium flex items-center"><Droplet size={18} className="mr-2"/>Sudoración Anormal</FormLabel>
                    </CardHeader>
                    <CardContent className="p-0 space-y-3">
                        {renderCheckboxField("presentoSudoracion", "¿Presentó Sudoración Anormal?")}
                        {watchPresentoSudoracion && (
                            <>
                                {renderInputField("horasSudorModerado", `Horas con Sudoración Moderada (de ${watchHorasBalance}h del balance)`)}
                                {renderInputField("horasSudorIntenso", `Horas con Sudoración Intensa (de ${watchHorasBalance}h del balance)`)}
                                <FormDescription className="text-xs">Moderada: +20ml/h. Intensa: +40ml/h.</FormDescription>
                            </>
                        )}
                    </CardContent>
                  </Card>
                </AccordionContent>
              </AccordionItem>
            </Accordion>
            
            <div className="flex flex-col sm:flex-row gap-2 pt-4">
              <Button type="button" variant="outline" onClick={resetCalculator} className="w-full sm:w-auto">
                <RefreshCcw className="mr-2 h-4 w-4" /> Limpiar Campos
              </Button>
              <Button type="submit" className="w-full sm:w-auto">
                <Sigma className="mr-2 h-4 w-4" /> Calcular Balance
              </Button>
            </div>
          </form>
        </Form>

        {balanceResult !== null && totalIngresos !== null && totalEgresos !== null && (
          <div className="mt-8 p-6 border rounded-lg bg-muted/50">
            <h3 className="text-xl font-bold mb-3 flex items-center justify-center text-foreground">
                <Droplet className="mr-2 h-5 w-5 text-primary"/>Resultado del Balance Hídrico ({form.getValues("horasBalance") || 24}h)
            </h3>
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-3 mb-4">
                <div className="p-3 rounded-md bg-green-100 dark:bg-green-800/30 border border-green-200 dark:border-green-700">
                    <p className="text-xs font-medium text-green-700 dark:text-green-300">INGRESOS TOTALES</p>
                    <p className="text-2xl font-bold text-green-600 dark:text-green-200">{totalIngresos.toFixed(0)} ml</p>
                    {aguaMetabolicaCalculada !== null && aguaMetabolicaCalculada > 0 && (
                         <p className="text-xs text-green-500 dark:text-green-400">(Incl. {aguaMetabolicaCalculada.toFixed(0)}ml agua metab.)</p>
                    )}
                </div>
                 <div className="p-3 rounded-md bg-red-100 dark:bg-red-800/30 border border-red-200 dark:border-red-700">
                    <p className="text-xs font-medium text-red-700 dark:text-red-300">EGRESOS TOTALES</p>
                    <p className="text-2xl font-bold text-red-600 dark:text-red-200">{totalEgresos.toFixed(0)} ml</p>
                     {totalEgresosInsensibles !== null && totalEgresosInsensibles > 0 && (
                         <p className="text-xs text-red-500 dark:text-red-400">(Incl. {totalEgresosInsensibles.toFixed(0)}ml pérdidas insens.)</p>
                    )}
                </div>
                 <div className={cn(
                    "p-3 rounded-md border",
                    balanceResult > 0 && "bg-blue-100 dark:bg-blue-800/30 border-blue-200 dark:border-blue-700",
                    balanceResult < 0 && "bg-orange-100 dark:bg-orange-800/30 border-orange-200 dark:border-orange-700",
                    balanceResult === 0 && "bg-gray-100 dark:bg-gray-800/30 border-gray-200 dark:border-gray-700"
                 )}>
                    <p className={cn(
                        "text-xs font-medium",
                        balanceResult > 0 && "text-blue-700 dark:text-blue-300",
                        balanceResult < 0 && "text-orange-700 dark:text-orange-300",
                        balanceResult === 0 && "text-gray-700 dark:text-gray-300"
                    )}>BALANCE HÍDRICO</p>
                    <p className={cn(
                        "text-2xl font-bold",
                         balanceResult > 0 && "text-blue-600 dark:text-blue-200",
                         balanceResult < 0 && "text-orange-600 dark:text-orange-200",
                         balanceResult === 0 && "text-gray-600 dark:text-gray-200"
                    )}>{balanceResult >=0 ? '+' : ''}{balanceResult.toFixed(0)} ml</p>
                </div>
            </div>
            {(perdidasAdicionalesCalculadas !== null && perdidasAdicionalesCalculadas > 0) && (
              <div className="text-sm text-center mb-2 text-muted-foreground">
                Pérdidas por Condiciones Específicas Adicionales: {perdidasAdicionalesCalculadas.toFixed(0)} ml.
              </div>
            )}
            <p className={cn(
                "text-sm font-semibold text-center",
                balanceResult > 0 && "text-blue-600",
                balanceResult < 0 && "text-orange-600",
                balanceResult === 0 && "text-gray-600"
              )}
            >
              {balanceResult > 0 && `Balance Positivo: +${balanceResult.toFixed(0)} ml`}
              {balanceResult < 0 && `Balance Negativo: ${balanceResult.toFixed(0)} ml`}
              {balanceResult === 0 && "Balance Neutro: 0 ml"}
            </p>
          </div>
        )}
        <Separator className="my-8" />
        <div className="text-xs text-muted-foreground space-y-2">
            <p className="flex items-start"><Info size={24} className="mr-2 flex-shrink-0 text-blue-500"/> 
                El balance hídrico es crucial para evaluar el estado de hidratación y la función renal. Un balance positivo indica retención de líquidos, mientras que uno negativo sugiere pérdida.
            </p>
            <p><strong>Interpretación General:</strong></p>
            <ul className="list-disc list-inside pl-4 space-y-1">
            <li><strong>Balance Positivo:</strong> Ingresos > Egresos. Puede indicar sobrecarga hídrica, edema, fallo renal o cardíaco.</li>
            <li><strong>Balance Negativo:</strong> Ingresos < Egresos. Puede indicar deshidratación, pérdidas excesivas, o uso de diuréticos.</li>
            <li><strong>Balance Neutro o Cero:</strong> Ingresos ≈ Egresos. Estado de equilibrio hídrico deseado en muchos casos.</li>
            </ul>
            <p className="italic">
                Evaluar siempre en el contexto clínico del paciente, considerando peso, signos vitales, y patologías de base.
                El agua metabólica es un aporte endógeno aprox. 300ml/24h (12.5ml/h). Las pérdidas insensibles basales son aprox. 0.5 ml/kg/hora o ~800ml/24h si no se ingresa peso.
            </p>
        </div>
      </CardContent>
    </Card>
  );
};

export default BalanceHidricoCalculator;